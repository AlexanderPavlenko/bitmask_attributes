{"name":"Bitmask attributes","body":"# BitmaskAttributes\r\n\r\nTransparent manipulation of bitmask attributes for ActiveRecord, based on\r\nthe bitmask-attribute gem, which has been dormant since 2009. This updated\r\ngem work with Rails 3 and up (including Rails 3.1).\r\n\r\n\r\n## Installation\r\n\r\nThe best way to install is with RubyGems:\r\n\r\n    $ [sudo] gem install bitmask_attributes\r\n\r\nOr better still, just add it to your Gemfile:\r\n\r\n    gem 'bitmask_attributes'\r\n\r\n\r\n## Example\r\n\r\nSimply declare an existing integer column as a bitmask with its possible\r\nvalues.\r\n\r\n    class User < ActiveRecord::Base\r\n      bitmask :roles, :as => [:writer, :publisher, :editor, :proofreader]\r\n    end\r\n\r\nYou can then modify the column using the declared values without resorting\r\nto manual bitmasks.\r\n\r\n    user = User.create(:name => \"Bruce\", :roles => [:publisher, :editor])\r\n    user.roles\r\n    # => [:publisher, :editor]\r\n    user.roles << :writer\r\n    user.roles\r\n    # => [:publisher, :editor, :writer]\r\n\r\nIt's easy to find out if a record has a given value:\r\n\r\n    user.roles?(:editor)\r\n    # => true\r\n\r\nYou can check for multiple values (uses an `and` boolean):\r\n\r\n    user.roles?(:editor, :publisher)\r\n    # => true\r\n    user.roles?(:editor, :proofreader)\r\n    # => false\r\n\r\nOr, just check if any values are present:\r\n\r\n    user.roles?\r\n    # => true\r\n\r\nYou can get the list of values for any given attribute:\r\n\r\n    User.values_for_roles\r\n    # => [:writer, :publisher, :editor, :proofreader]\r\n\r\n\r\n## Named Scopes\r\n\r\nA couple useful named scopes are also generated when you use\r\n`bitmask`:\r\n\r\n    User.with_roles\r\n    # => (all users with roles)\r\n    User.with_roles(:editor)\r\n    # => (all editors)\r\n    User.with_roles(:editor, :writer)\r\n    # => (all users who are BOTH editors and writers)\r\n    User.with_any_roles(:editor, :writer)\r\n    # => (all users who are editors OR writers)\r\n    User.with_exact_roles(:writer)\r\n    # => (all users who are ONLY writers)\r\n    User.with_exact_roles(:writer, :editor)\r\n    # => (all users who are BOTH editors and writers and nothing else)\r\n\r\nFind records without any bitmask set:\r\n\r\n    User.without_roles\r\n    # => (all users without a role)\r\n    User.no_roles\r\n    # => (all users without a role)\r\n\r\nFind records without specific attributes:\r\n\r\n    User.without_roles(:editor)\r\n    # => (all users who are not editors)\r\n\r\n    User.without_roles(:writer, :editor)\r\n    # => (all users who are NEITHER writers nor editors)\r\n\r\nNote that \"without_\" supports one or more attribute arguments, and the \"no_\" method does not support arguments.\r\nAnd \"with_exact_\" without arguments is alias for \"no_\"\r\n\r\n\r\n## Adding Methods\r\n\r\nYou can add your own methods to the bitmasked attributes (similar to\r\nnamed scopes):\r\n\r\n    bitmask :other_attribute, :as => [:value1, :value2] do\r\n      def worked?\r\n        true\r\n      end\r\n    end\r\n\r\n    user = User.first\r\n    user.other_attribute.worked?\r\n    # => true\r\n\r\n## Handling null values\r\n\r\nBy default, bitmasks support the potential for the underlying integer value to be null. However, if you have created\r\na field that is guaranteed never to be null, you can simplify the SQL query conditions by declaring \":null => false\"\r\nin the definition:\r\n\r\n     bitmask :never_null_attributes,:as => [:value1, :value2], :null => false\r\n\r\n## Allowing for a \"zero\" value\r\n\r\nIt is common to use web forms to set bitmask bits using checkboxes. If the various bits each are represented by a\r\ncheckbox and the user unchecks them all, the resulting \"params\" posted to the controller will be missing. When this\r\nhappens, a controller will need to ensure that a \"params\" hash entry has an empty array or a call to \"update_attributes\"\r\nwill not change the attribute. For example:\r\n\r\n    In model...\r\n        class SomeModel < ActiveRecord::Base\r\n            bitmask :some_attribute, :as => [:value1, :value2]\r\n        end\r\n\r\n    In view...\r\n        <input type=\"checkbox\" name=\"some_model[some_attribute][]\" value=\"value1\"/>\r\n        <input type=\"checkbox\" name=\"some_model[some_attribute][]\" value=\"value2\"/>\r\n\r\n    In controller...\r\n        def update\r\n            @some_model = SomeModel.find(params[:id])\r\n            params[:some_attribute] ||= []\r\n            @some_model.update_attributes(params)\r\n        end\r\n\r\nAs an alternative, you may provide a special symbol representing \"zero\":\r\n\r\n    In model...\r\n        class SomeModel < ActiveRecord::Base\r\n            bitmask :some_attribute, :as => [:value1, :value2], :zero_value => :none\r\n        end\r\n\r\n    In view...\r\n        <input type=\"checkbox\" name=\"some_model[some_attribute][]\" value=\"value1\"/>\r\n        <input type=\"checkbox\" name=\"some_model[some_attribute][]\" value=\"value2\"/>\r\n        <input type=\"hidden\"   name=\"some_model[some_attribute][]\" value=\"none\"/>\r\n\r\n    In controller...\r\n        def update\r\n            @some_model = SomeModel.find(params[:id])\r\n            @some_model.update_attributes(params)\r\n        end\r\n\r\nThis technique can be particularly useful for both forms and web services where setting the attribute in question may\r\nbe optionally included or not such that the controller setting of an empty array in the first example would not be\r\ncorrect.\r\n\r\n## Warning: Modifying possible values\r\n\r\nIMPORTANT: Once you have data using a bitmask, don't change the order\r\nof the values, remove any values, or insert any new values in the `:as`\r\narray anywhere except at the end.  You won't like the results.\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it.\r\n2. Create a branch (`git checkout -b new-feature`)\r\n3. Make your changes\r\n4. Run the tests (`bundle install` then `bundle exec rake`)\r\n5. Commit your changes (`git commit -am \"Created new feature\"`)\r\n6. Push to the branch (`git push origin new-feature`)\r\n7. Create a [pull request](http://help.github.com/send-pull-requests/) from your branch.\r\n8. Promote it. Get others to drop in and +1 it.\r\n\r\n\r\n## Credits\r\n\r\nThanks to [Bruce Williams](https://github.com/bruce) and the following contributors\r\nof the bitmask-attribute plugin:\r\n\r\n* [Jason L Perry](http://github.com/ambethia)\r\n* [Nicolas Fouch√©](http://github.com/nfo)\r\n* [Ivan Buiko](http://github.com/IvanBuiko)\r\n\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2007-2009 Bruce Williams & 2011-2012 Joel Moss. See LICENSE for details.\r\n","tagline":"Simple bitmask attribute support for ActiveRecord 3+","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}